apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
      labels:
        app: {{ template "fullname" . }}
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        component: "{{.Release.Name}}-{{.Values.Component}}"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: "beta.kubernetes.io/instance-type"
                  operator: In
                  values: ["{{.Values.VmInstanceType}}"]
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: [{{ template "fullname" . }}]
            topologyKey: kubernetes.io/hostname
      containers:
      - name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
        image: "{{.Values.Image}}:{{.Values.ImageTag}}"
        imagePullPolicy: "{{.Values.ImagePullPolicy}}"
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "{{.Values.resources.limits.cpu}}"
            memory: "{{.Values.resources.limits.memory}}"
          requests:
           cpu: "{{.Values.resources.requests.cpu}}"
           memory: "{{.Values.resources.requests.memory}}"
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "PID=$(pidof java) && kill $PID && while ps -p $PID > /dev/null; do sleep 1; done"]
        env:
          - name: MAX_HEAP_SIZE
            value: "{{.Values.cassandra.MaxHeapSize}}"
          - name: HEAP_NEWSIZE
            value: "{{.Values.cassandra.HeapNewSize}}"
          - name: CASSANDRA_SEEDS
            value: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}-0.{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}.{{.Release.Namespace}}.svc.cluster.local"
          - name: CASSANDRA_CLUSTER_NAME
            value: "{{.Values.cassandra.ClusterName}}"
          - name: CASSANDRA_AUTO_BOOTSTRAP
            value: "{{.Values.cassandra.AutoBootstrap}}"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /ready-probe.sh
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /cassandra_data
          name: cassandra-data
      volumes:
      - name: cassandra-data
        hostPath:
            path: "/mnt/cassandra"